2023-01-22 12:32:33,533 - pyswarms.backend.generators - ERROR - generate_swarm() takes an int for n_particles and dimensions and an array for bounds
Traceback (most recent call last):
  File "/home/dli36/anaconda3/lib/python3.8/site-packages/pyswarms/backend/generators.py", line 81, in generate_swarm
    pos = center * np.random.uniform(
  File "mtrand.pyx", line 1134, in numpy.random.mtrand.RandomState.uniform
  File "_common.pyx", line 594, in numpy.random._common.cont
  File "_common.pyx", line 502, in numpy.random._common.cont_broadcast_2
TypeError: 'tuple' object cannot be interpreted as an integer
2023-01-22 12:35:32,373 - pyswarms.single.global_best - INFO - Optimize for 10 iters with {'c1': 0.5, 'c2': 0.3, 'w': 0.9}
2023-01-22 12:37:45,423 - pyswarms.single.global_best - INFO - Optimize for 10 iters with {'c1': 0.5, 'c2': 0.3, 'w': 0.9}
2023-01-22 12:42:35,267 - pyswarms.single.global_best - INFO - Optimize for 10 iters with {'c1': 0.5, 'c2': 0.3, 'w': 0.9}
2023-01-22 12:43:57,296 - pyswarms.single.global_best - INFO - Optimize for 10 iters with {'c1': 0.5, 'c2': 0.3, 'w': 0.9}
2023-01-22 12:46:32,480 - pyswarms.backend.generators - ERROR - Bounds and/or init_pos should be of size (100,)
Traceback (most recent call last):
  File "/home/dli36/anaconda3/lib/python3.8/site-packages/pyswarms/backend/generators.py", line 81, in generate_swarm
    pos = center * np.random.uniform(
  File "mtrand.pyx", line 1134, in numpy.random.mtrand.RandomState.uniform
  File "_common.pyx", line 594, in numpy.random._common.cont
  File "_common.pyx", line 511, in numpy.random._common.cont_broadcast_2
  File "__init__.pxd", line 741, in numpy.PyArray_MultiIterNew3
ValueError: shape mismatch: objects cannot be broadcast to a single shape.  Mismatch is between arg 0 with shape (10, 100) and arg 1 with shape (10, 100, 1).
2023-01-22 12:48:21,870 - pyswarms.single.global_best - INFO - Optimize for 10 iters with {'c1': 0.5, 'c2': 0.3, 'w': 0.9}
2023-01-22 12:49:05,815 - pyswarms.single.global_best - INFO - Optimize for 100 iters with {'c1': 0.5, 'c2': 0.5, 'w': 0.9}
2023-01-22 12:51:17,648 - pyswarms.backend.generators - ERROR - Bounds and/or init_pos should be of size (2,)
Traceback (most recent call last):
  File "/home/dli36/anaconda3/lib/python3.8/site-packages/pyswarms/backend/generators.py", line 81, in generate_swarm
    pos = center * np.random.uniform(
  File "mtrand.pyx", line 1134, in numpy.random.mtrand.RandomState.uniform
  File "_common.pyx", line 594, in numpy.random._common.cont
  File "_common.pyx", line 511, in numpy.random._common.cont_broadcast_2
  File "__init__.pxd", line 741, in numpy.PyArray_MultiIterNew3
ValueError: shape mismatch: objects cannot be broadcast to a single shape.  Mismatch is between arg 0 with shape (10, 2) and arg 1 with shape (10, 100).
2023-01-22 12:51:27,850 - pyswarms.single.global_best - INFO - Optimize for 1000 iters with {'c1': 0.5, 'c2': 0.3, 'w': 0.9}
2023-01-22 12:51:53,315 - pyswarms.single.global_best - INFO - Optimize for 10 iters with {'c1': 0.5, 'c2': 0.3, 'w': 0.9}
2023-01-22 12:52:44,011 - pyswarms.single.global_best - INFO - Optimize for 10 iters with {'c1': 0.5, 'c2': 0.3, 'w': 0.9}
2023-01-22 12:52:59,905 - pyswarms.backend.generators - ERROR - Bounds and/or init_pos should be of size (10,)
Traceback (most recent call last):
  File "/home/dli36/anaconda3/lib/python3.8/site-packages/pyswarms/backend/generators.py", line 81, in generate_swarm
    pos = center * np.random.uniform(
  File "mtrand.pyx", line 1134, in numpy.random.mtrand.RandomState.uniform
  File "_common.pyx", line 594, in numpy.random._common.cont
  File "_common.pyx", line 511, in numpy.random._common.cont_broadcast_2
  File "__init__.pxd", line 741, in numpy.PyArray_MultiIterNew3
ValueError: shape mismatch: objects cannot be broadcast to a single shape.  Mismatch is between arg 0 with shape (10, 10) and arg 1 with shape (10, 100).
2023-01-22 12:53:02,257 - pyswarms.backend.generators - ERROR - Bounds and/or init_pos should be of size (10,)
Traceback (most recent call last):
  File "/home/dli36/anaconda3/lib/python3.8/site-packages/pyswarms/backend/generators.py", line 81, in generate_swarm
    pos = center * np.random.uniform(
  File "mtrand.pyx", line 1134, in numpy.random.mtrand.RandomState.uniform
  File "_common.pyx", line 594, in numpy.random._common.cont
  File "_common.pyx", line 511, in numpy.random._common.cont_broadcast_2
  File "__init__.pxd", line 741, in numpy.PyArray_MultiIterNew3
ValueError: shape mismatch: objects cannot be broadcast to a single shape.  Mismatch is between arg 0 with shape (10, 10) and arg 1 with shape (10, 100).
2023-01-22 12:53:11,299 - pyswarms.single.global_best - INFO - Optimize for 10 iters with {'c1': 0.5, 'c2': 0.3, 'w': 0.9}
2023-01-22 12:53:19,744 - pyswarms.single.global_best - INFO - Optimize for 10 iters with {'c1': 0.5, 'c2': 0.3, 'w': 0.9}
2023-01-22 12:54:10,060 - pyswarms.single.global_best - INFO - Optimize for 10 iters with {'c1': 0.5, 'c2': 0.3, 'w': 0.9}
2023-01-22 12:54:41,969 - pyswarms.single.global_best - INFO - Optimize for 10 iters with {'c1': 0.5, 'c2': 0.3, 'w': 0.9}
2023-01-22 12:57:00,338 - pyswarms.single.global_best - INFO - Optimization finished | best cost: 28.7691412808081, best pos: [1.68274755 0.69318962 1.72988622 2.21092012 3.91264067 3.86495077
 2.10949118 3.74423742 2.79812104 2.90638438 1.39731675 3.35873178
 3.52839301 2.85934437 2.86956813 1.4261268  3.67134525 3.524265
 1.96863954 2.85513512 3.2794746  0.7300608  1.11585619 1.03510865
 2.80919846 2.63060984 1.33823645 1.38220551 3.94334422 3.79160199
 0.90674248 3.64824572 1.5450443  3.12675376 2.12526368 1.78366447
 2.60914079 2.0015968  3.47986574 2.35690042 3.53403067 1.61202639
 2.64958968 2.41757586 1.22121949 2.73196154 3.53074122 3.32979683
 3.71088857 3.75985306 3.35436123 0.83227698 3.82714418 2.96271493
 2.80214599 1.67514826 2.66975127 0.89382278 3.86021989 3.28552801
 2.39958669 2.33789174 2.9137745  1.78711403 2.45154278 2.77152456
 3.25995063 3.72556626 3.70587815 3.29200249 1.80679798 3.23816127
 1.465462   2.87366474 1.82788322 0.99662192 1.99490384 3.40568595
 2.32475883 2.20669474 2.45777233 2.46565491 2.4137953  2.69719268
 3.88356475 3.45162202 3.68969364 3.42494267 3.47814427 3.09533997
 3.5399972  1.11949853 2.23594515 2.69688754 1.84973483 2.07501894
 3.21354264 1.55216561 3.59889179 3.39733086]
2023-01-22 12:58:40,844 - pyswarms.single.global_best - INFO - Optimize for 10 iters with {'c1': 0.5, 'c2': 0.3, 'w': 0.9}
2023-01-22 12:59:01,599 - pyswarms.single.global_best - INFO - Optimize for 10 iters with {'c1': 0.5, 'c2': 0.3, 'w': 0.9}
2023-01-22 12:59:14,706 - pyswarms.single.global_best - INFO - Optimize for 10 iters with {'c1': 0.5, 'c2': 0.3, 'w': 0.9}
2023-01-22 13:00:28,622 - pyswarms.single.global_best - INFO - Optimize for 100 iters with {'c1': 0.5, 'c2': 0.3, 'w': 0.9}
2023-01-22 13:00:38,754 - pyswarms.single.global_best - INFO - Optimize for 100 iters with {'c1': 0.5, 'c2': 0.3, 'w': 0.9}
2023-01-22 13:00:44,836 - pyswarms.single.global_best - INFO - Optimize for 100 iters with {'c1': 0.5, 'c2': 0.3, 'w': 0.9}
2023-01-22 13:34:04,134 - pyswarms.single.global_best - INFO - Optimization finished | best cost: 26.3524958544629, best pos: [3.704361   1.23027093 3.46189105 0.75856693 0.65904157 2.75285109
 3.08004692 1.35150732 2.30792101 3.52247389 3.639557   1.65671056
 2.65568938 2.19704173 2.26602123 1.04491668 1.46568288 3.92526703
 3.80619494 2.01251691 1.31292535 2.10534106 1.54234005 1.66848688
 3.36976194 2.0773763  1.4483808  1.59842421 2.57734237 3.91948655
 3.69657117 3.25809923 3.17346143 3.69000524 1.15963394 1.7813349
 2.65321796 3.84918386 2.40344115 0.83561351 1.02083619 3.8860505
 2.19146453 2.71547729 2.83339377 3.44766029 3.10476471 3.79630458
 2.15163981 1.52516851 2.23410755 3.59033591 2.91874209 2.2701844
 2.66913377 3.58763111 1.86741643 3.5476543  3.79241351 1.67525096
 1.50920296 1.11771221 3.14099322 3.24461231 0.74544193 0.79310287
 1.14582532 1.26773316 1.93778422 3.05870222 1.22415496 3.28130197
 0.58639682 2.42981373 1.38156885 1.60471028 3.8862315  2.29180913
 2.85811188 3.22506671 2.68870838 1.59969013 0.8498916  3.68328664
 1.1947417  3.93051253 2.70062489 2.13825365 0.56955688 1.41833165
 2.31118214 1.67448562 1.94348704 1.9636216  2.21739075 1.78894078
 3.93907099 1.31776842 1.50047376 1.71815616]
2023-01-22 13:46:01,646 - pyswarms.single.global_best - INFO - Optimize for 100 iters with {'c1': 0.5, 'c2': 0.3, 'w': 0.9}
2023-01-22 13:46:01,792 - pyswarms.single.global_best - INFO - Optimization finished | best cost: 442.34312802527916, best pos: [2.62340488 1.99524423 1.72018783 0.61090366 0.77756782 3.29775818
 2.7578205  1.76252804 2.70288837 3.2400491  1.08573306 0.91537693
 2.46417478 2.16169483 1.97977156 0.75325817 2.38932451 1.95517446
 0.60470659 2.21152706 1.84465689 1.341885   0.51929417 0.80745404
 1.52548595 1.23537249 2.4462215  1.45386297 3.13924235 1.48571869
 1.65828996 2.02082349 1.04171702 2.2551145  0.55856468 0.78110605
 0.8492159  2.48026388 1.26734081 3.9786913  1.98823436 2.35217273
 2.30852755 1.76809413 1.26689827 2.81138596 3.83687189 2.00126125
 0.60405312 3.93652108 2.85859044 0.7651041  2.05655814 3.38750473
 1.52565006 1.89537306 2.14215883 1.1582122  1.64860711 2.20831392
 2.58840987 0.50949625 1.21261622 2.40074127 1.21381795 2.37999187
 1.85355037 3.25904933 1.5307461  1.0971525  1.03593124 0.96857936
 1.83317874 2.64858041 3.21042751 3.46200279 0.86750649 3.61103401
 0.59748874 1.25366719 0.90806195 1.73898733 2.21531121 0.86714714
 2.0629685  1.75622069 3.92504228 2.17852621 1.5532051  1.31091623
 2.26412041 2.01558896 3.14292817 1.25529286 2.87711898 2.63935491
 1.31033589 2.67737489 1.82825363 1.79348292]
2023-01-22 13:46:17,562 - pyswarms.single.global_best - INFO - Optimize for 100 iters with {'c1': 0.5, 'c2': 0.3, 'w': 0.9}
2023-01-22 13:46:17,721 - pyswarms.single.global_best - INFO - Optimization finished | best cost: 4877.558517666731, best pos: [1.46923981 1.2932814  2.83604543 3.69024276 0.89042114 2.94095645
 1.31450475 2.29299536 2.3674947  2.03581475 0.90804866 0.85255754
 2.02048012 1.31678384 3.72194072 3.24323296 3.52976705 2.22677605
 1.70327825 1.12362547 2.18728567 3.76402023 3.285547   3.85637754
 1.71723513 1.66544336 1.85972553 0.75095719 1.83101052 1.54179571
 1.24168543 2.28935898 2.75467606 0.90462009 1.75728289 2.14261963
 2.05044016 0.99614035 2.97088354 0.61849811 1.6490714  3.12458228
 2.10935432 1.34556723 2.6264065  1.17156767 0.79099385 2.79982047
 1.58268878 2.75406898 0.87157528 3.00870465 3.23500137 1.21395797
 3.91403386 0.70133104 1.39646392 2.72979905 3.89770001 1.68017357
 2.55718089 3.75118604 1.47172321 3.46429318 3.39666929 1.09104137
 3.65280723 3.49921573 3.85943246 1.25524555 1.60256268 2.24557428
 1.39562024 2.89750359 3.16959476 2.08427081 1.92942767 2.59194576
 2.5474536  1.32424225 0.73876197 2.3326593  0.52714237 2.2893938
 1.64256693 1.06517905 3.1500154  1.43136935 1.33572891 0.81550309
 1.01498301 1.10610543 1.21038674 2.71480852 1.33595913 3.29916226
 0.81902161 1.89338898 3.26611776 2.35722066]
2023-01-22 13:46:27,909 - pyswarms.single.global_best - INFO - Optimize for 100 iters with {'c1': 0.5, 'c2': 0.3, 'w': 0.9}
2023-01-22 13:46:28,131 - pyswarms.single.global_best - INFO - Optimization finished | best cost: 51327.31471593722, best pos: [1.38436704 3.03629799 3.21018162 3.25505309 1.32685741 2.08142225
 0.80387172 1.41680056 2.41135069 0.6055079  1.21320583 3.35582635
 0.97318446 2.13148629 0.60101911 2.02808569 3.2258074  3.30821413
 3.28265592 1.81670082 3.77105152 0.9206157  2.37264065 3.88920448
 0.67907781 3.13114934 1.86796378 2.57767447 3.42076701 1.19155506
 2.17506048 2.32488899 2.95914525 0.71681611 2.09895828 3.07648721
 3.16448344 2.59167463 0.97024306 1.01172333 2.30911215 1.07178377
 2.19832569 3.60474578 1.74920782 1.55962936 3.69270899 1.13128373
 2.36495406 3.74301362 1.36404415 1.02643856 2.32963355 1.47032907
 3.83481865 2.21335471 3.06851252 1.85884936 0.93750229 0.8645145
 2.09343381 2.75385094 2.64827608 1.82834708 0.98124681 1.28421083
 1.46165268 2.55188125 0.56556596 3.73023468 3.07458044 2.7692272
 1.984406   1.66905391 3.4511348  1.75387305 3.12883682 0.5757165
 1.72997475 2.83316609 3.8686385  3.59711554 2.58778202 2.61894711
 1.35902465 3.09825702 2.15390851 0.55194953 1.1171096  1.96242829
 0.72576896 1.87593528 3.06996657 1.37796111 2.79185236 2.93357782
 2.28556056 2.5817913  1.41610997 2.09010206]
2023-01-22 13:46:48,383 - pyswarms.single.global_best - INFO - Optimize for 1000 iters with {'c1': 0.5, 'c2': 0.3, 'w': 0.9}
2023-01-22 13:46:50,517 - pyswarms.single.global_best - INFO - Optimization finished | best cost: 50890.191393104775, best pos: [2.49850526 3.75862474 1.02687671 1.54730917 3.06843207 1.48705633
 1.26568084 1.84365978 2.18830444 2.4113277  2.24098542 3.68877401
 2.73912417 2.57630355 1.52668531 2.66658991 1.84445436 3.2121872
 0.85186239 1.75234862 0.78961683 3.42944658 3.80580027 2.39595959
 3.20733312 3.23551045 2.32278424 2.30787821 2.16182221 2.47423288
 2.25991679 2.53015207 1.88147613 0.76881225 1.48427501 2.57502536
 3.35941643 1.09703505 2.11840132 2.14129691 1.91016436 3.61213814
 2.30169935 1.18873059 0.87800381 2.56190241 3.29686492 2.04097764
 1.73500292 2.12549397 2.76446455 0.73077217 3.30848355 2.01443263
 1.01799558 2.41340185 2.14120444 1.3964083  2.3899613  0.91607171
 1.13697788 1.20663454 3.01960408 2.61533897 2.28436758 2.34178002
 1.11260294 2.38478379 2.38045018 3.28629355 2.20740518 2.94423687
 2.13314223 2.79130457 0.86727423 1.98499464 3.92781228 2.80797812
 1.46370787 2.22664186 2.77089171 1.14423694 2.1807351  2.28538737
 1.5679109  1.02004515 0.63060527 2.25905466 1.16439652 1.62206713
 1.902463   2.7726359  2.7148586  1.79520855 2.93292183 1.95204563
 1.58217083 2.16573779 2.3312549  2.4590353 ]
2023-01-22 13:47:01,783 - pyswarms.single.global_best - INFO - Optimize for 1000 iters with {'c1': 0.5, 'c2': 0.3, 'w': 0.9}
2023-01-22 13:47:04,013 - pyswarms.single.global_best - INFO - Optimization finished | best cost: 52885.6108347503, best pos: [0.83068134 1.36781821 2.92587108 2.36614784 1.65394508 1.24955479
 1.58309779 0.50215377 1.95041479 2.30852488 1.0735508  0.85256515
 0.71661035 0.5955238  0.93105828 3.9831452  0.57992766 1.27707059
 3.36912254 1.3764198  3.32075447 3.99088734 1.61233083 3.11151837
 1.20141371 3.11325102 0.93940721 2.92777156 2.83340124 3.13793892
 3.03509865 0.97560347 2.47297702 1.05774736 2.53740287 2.37588108
 2.18053443 1.72711814 2.89050747 2.01774398 3.44450941 0.54830977
 0.88238914 1.50510672 3.10250728 2.77594592 1.55391636 2.37125525
 0.97568703 3.42821573 1.68055698 2.64807974 1.30053692 2.09210177
 2.51747375 3.0099106  2.4719833  1.64097183 2.8693182  3.39481828
 3.11181521 1.96096445 3.0747436  1.19756295 3.49680621 1.015669
 3.60215837 2.13274465 3.36634015 3.29236941 3.03495709 1.00151568
 1.48843661 2.62845389 3.15055515 0.7916288  1.9351685  3.35199805
 2.4593204  2.94573616 1.08612337 2.89378126 3.9460553  0.98986986
 3.19532167 1.0655112  3.50014759 3.00599722 1.37745005 1.91012983
 1.90520062 2.54239633 3.86972679 2.51212835 1.3783863  1.98060602
 2.2637324  2.21662483 3.76874973 2.60319242]
2023-01-22 13:47:22,799 - pyswarms.single.global_best - INFO - Optimize for 10000 iters with {'c1': 0.5, 'c2': 0.3, 'w': 0.9}
2023-01-22 13:47:41,256 - pyswarms.single.global_best - INFO - Optimization finished | best cost: 52885.6108347503, best pos: [0.83068134 1.36781821 1.41097608 2.36614784 2.61086087 1.24955479
 1.58309779 0.54749352 1.95041479 2.30852488 1.0735508  0.85256515
 1.67110108 3.53206622 0.93105828 2.30437836 0.57992766 1.27707059
 3.36912254 1.3764198  3.32075447 2.40015069 1.61233083 3.11151837
 1.20141371 3.11325102 2.50160367 2.92777156 2.83340124 3.13793892
 3.03509865 2.18420107 2.47297702 1.05774736 2.53740287 2.37588108
 2.18053443 1.72711814 2.89050747 2.01774398 3.44450941 2.31217044
 0.88238914 1.50510672 3.10250728 2.77594592 1.55391636 2.37125525
 0.97568703 2.31997022 1.68055698 2.64807974 1.30053692 2.09210177
 2.51747375 3.0099106  2.4719833  1.64097183 2.8693182  3.01932114
 3.11181521 1.96096445 3.0747436  1.19756295 3.49680621 1.015669
 1.99058908 2.13274465 3.36634015 3.29236941 3.35207269 1.00151568
 1.48843661 2.62845389 3.15055515 1.85402716 1.9351685  3.60713822
 2.4593204  2.94573616 3.8142196  2.89378126 1.82814169 0.98986986
 3.19532167 1.0655112  3.50014759 3.00599722 1.37745005 1.91012983
 1.90520062 2.54239633 1.94181712 2.51212835 1.3783863  1.98060602
 2.2637324  2.21662483 3.76874973 2.60319242]
2023-01-22 13:47:41,367 - pyswarms.single.global_best - INFO - Optimize for 10000 iters with {'c1': 0.5, 'c2': 0.3, 'w': 0.9}
2023-01-22 13:47:59,765 - pyswarms.single.global_best - INFO - Optimization finished | best cost: 47498.1227439186, best pos: [2.721966   1.25303981 2.95959671 1.67870118 3.69700297 1.43536885
 1.17864548 0.59930099 1.3536473  0.71492941 1.78371176 2.66824493
 2.98406847 2.29338475 1.26019554 1.9096623  1.93271403 1.21074892
 2.41691681 1.88413323 1.00270786 1.6109988  1.96502687 3.48811235
 3.02225283 1.36731448 1.73741892 2.89321961 2.77633523 1.66585991
 1.5214381  3.49384798 1.0109659  2.56505974 1.64639891 1.53703901
 3.32764916 3.54877573 3.07183999 1.63125871 3.10660371 3.33048518
 2.23103562 3.82198614 3.26519318 1.57876195 2.85635884 0.52772485
 1.11111003 3.92567535 1.5896295  1.06706067 2.53780263 2.63204535
 2.27389766 2.78239163 1.54470444 0.73492975 3.12212562 3.95326594
 1.24752693 1.35375792 1.48182603 2.00060985 0.65917121 1.90046999
 2.98935498 1.9140434  3.89024474 3.43726734 1.69800203 2.38937289
 3.17591117 1.08830708 2.10908339 1.48365288 2.39895883 1.49840907
 1.68268033 3.05683758 0.81504516 1.9088861  1.623486   0.70567784
 2.42601061 3.80713661 1.39835204 1.52135484 3.74546327 3.18826573
 3.90270829 2.68471884 0.56021855 1.40515944 0.83134106 3.37095297
 3.17320323 2.56986249 3.87422452 3.89453512]
